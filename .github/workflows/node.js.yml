# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
  pull_request:
  release:

jobs:
  prepare:
    name: "Prepare"
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - run: printf "Event:${{ github.event_name }}"
      - name: Get the version
        id: get_version
        run: if [ "${GITHUB_EVENT_NAME}" == "push" ]; then echo "VERSION=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT; else echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT; fi
        
  build:
    name: "Build"
    needs: [prepare]
    # Run job for: github releases, tag pushes without github release and regular pushes (not tag)
    if: github.event_name == 'release' || !contains(github.ref, 'refs/tags/') || needs.prepare.outputs.create_release == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        #node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    #env:
    #  TARBALL_VERSION: ${{ needs.prepare.outputs.version }}
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: ls -l && ls -l node_modules && ls -l src
    - run: npm run build --if-present
    #- run: cd build && tar -pczf "../discovery-service-frontend-${TARBALL_VERSION}.tar.gz" *
    #- run: pwd && ls -l && env
    #- run: echo "Artifact file:${GITHUB_WORKSPACE}/discovery-service-frontend-${TARBALL_VERSION}.tar.gz"
    - uses: actions/upload-artifact@master
      with:
        name: build-output
        path: build/
        retention-days: 1
          
  release:
    name: "Release"
    needs: [prepare, build]
    # Run job for github releases
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    env:
      TARBALL_VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Download build output artifact
        uses: actions/download-artifact@master
        with:
          name: build-output
          path: build/
#      - run: pwd && ls -l
      - name: Create release tarball
          run: cd build && tar -pczvf "../discovery-service-frontend-${TARBALL_VERSION}.tar.gz" *
 #     - run: ls -l
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./discovery-service-frontend-${{ env.TARBALL_VERSION }}.tar.gz
          asset_name: discovery-service-frontend-${{ env.TARBALL_VERSION }}.tar.gz
          asset_content_type: application/tar+gzip